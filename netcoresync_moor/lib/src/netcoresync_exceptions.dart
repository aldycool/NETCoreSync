/// The generic type of exception that is generated by the client framework that
/// is not covered by other specific exceptions.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncException implements Exception {
  final String message;
  const NetCoreSyncException([this.message = ""]);
  @override
  String toString() => "NetCoreSyncException: $message";
}

/// The client code hasn't initialized (call the `netCoreSyncInitialize()`) yet.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncNotInitializedException extends NetCoreSyncException {
  const NetCoreSyncNotInitializedException()
      : super("Client is not initialized yet");
}

/// The client code tries to do database operations without setting the
/// [SyncIdInfo] first.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncSyncIdInfoNotSetException extends NetCoreSyncException {
  const NetCoreSyncSyncIdInfoNotSetException()
      : super("SyncIdInfo is not set yet");
}

/// This exception is raised if the client code tries to do synchronization
/// inside a Moor's database transaction.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncMustNotInsideTransactionException
    extends NetCoreSyncException {
  const NetCoreSyncMustNotInsideTransactionException()
      : super("This method call must not be wrapped inside Transaction");
}

/// The framework detects a database operation performed by the client code that
/// uses unregistered table types (the class type is not annotated with
/// [NetCoreSyncTable]).
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncTypeNotRegisteredException extends NetCoreSyncException {
  const NetCoreSyncTypeNotRegisteredException(Type type)
      : super("The type: $type is not registered correctly in NetCoreSync. "
            "Please check your @NetCoreSyncTable annotation on its Table "
            "class.");
}

/// This exception type will be raised for all errors related to WebSockets
/// communcation during synchronization.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncSocketException extends NetCoreSyncException {
  const NetCoreSyncSocketException(String message) : super(message);
}

/// The generic type of exception that is generated by the server framework that
/// is not covered by other specific exceptions.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncServerException implements Exception {
  final String message;
  const NetCoreSyncServerException([this.message = ""]);
  @override
  String toString() => "NetCoreSyncServerException: $message";
}

/// This exception is raised during the start of synchronization if the server
/// is currently synchronizing other connection with the same `syncId`.
///
/// Please read the [Synchronization Errors](https://github.com/aldycool/NETCoreSync/tree/master/netcoresync_moor#synchronization-errors)
/// in the `netcoresync_moor` documentation for more details.
class NetCoreSyncServerSyncIdInfoOverlappedException
    extends NetCoreSyncServerException {
  final List<String> overlappedSyncIds;
  NetCoreSyncServerSyncIdInfoOverlappedException(this.overlappedSyncIds)
      : super(
            "The following syncIds are overlapped and currently synchronizing: "
            "${overlappedSyncIds.join(", ")}");
}
